[
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "taggit.managers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "taggit.managers",
        "description": "taggit.managers",
        "detail": "taggit.managers",
        "documentation": {}
    },
    {
        "label": "TaggableManager",
        "importPath": "taggit.managers",
        "description": "taggit.managers",
        "isExtraImport": true,
        "detail": "taggit.managers",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "PostUserLikes",
        "importPath": "blog.models",
        "description": "blog.models",
        "isExtraImport": true,
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "TagListSerializerField",
        "importPath": "taggit.serializers",
        "description": "taggit.serializers",
        "isExtraImport": true,
        "detail": "taggit.serializers",
        "documentation": {}
    },
    {
        "label": "TaggitSerializer",
        "importPath": "taggit.serializers",
        "description": "taggit.serializers",
        "isExtraImport": true,
        "detail": "taggit.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "try_parse_int",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "ModelViewSet",
        "importPath": "rest_framework.viewsets",
        "description": "rest_framework.viewsets",
        "isExtraImport": true,
        "detail": "rest_framework.viewsets",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissions",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "DjangoModelPermissions",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BasePermission",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrModelPermissions",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "permissions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "FunFact",
        "importPath": "hw.models",
        "description": "hw.models",
        "isExtraImport": true,
        "detail": "hw.models",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "rest_framework.request",
        "description": "rest_framework.request",
        "isExtraImport": true,
        "detail": "rest_framework.request",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "isExtraImport": true,
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "isExtraImport": true,
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "blog.migrations.0001_initial",
        "description": "blog.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[",
        "detail": "blog.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "join_space",
        "kind": 2,
        "importPath": "blog.templatetags.custom_filters",
        "description": "blog.templatetags.custom_filters",
        "peekOfCode": "def join_space(value):\n    if isinstance(value, (list, tuple)):\n        return \" \".join(value)\n    return value\n# {% tags|join_space %}",
        "detail": "blog.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "blog.templatetags.custom_filters",
        "description": "blog.templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n# this function accepts a list/tuple\n# and returns space joined str\n# [\"django\", \"pyhton\"] => \"django python\"\n@register.filter\ndef join_space(value):\n    if isinstance(value, (list, tuple)):\n        return \" \".join(value)\n    return value\n# {% tags|join_space %}",
        "detail": "blog.templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "BlogConfig",
        "kind": 6,
        "importPath": "blog.apps",
        "description": "blog.apps",
        "peekOfCode": "class BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'\n    @receiver(post_save, sender='auth.User')\n    def perform_add_user_to_users_group(sender, instance, created, **kwargs):\n        # the import is nested inside the function\n        from django.contrib.auth.models import Group, User\n        from blog.models import UserProfile\n        from rest_framework.authtoken.models import Token\n        if not created:",
        "detail": "blog.apps",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, unique=True)\n    bio = models.TextField(blank=True, max_length=1000)\n    profile_pic = models.ImageField(upload_to='profile_pics', blank=True)\n    birth_date = models.DateField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    @property\n    def username(self):\n        return self.user.username",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Post(models.Model):\n    author = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    title = models.CharField(max_length=100, unique=True, validators=[\n        MinLengthValidator(5),\n        MaxLengthValidator(100),\n        RegexValidator(\n            regex='^[a-zA-Z].*$',\n            message=\"Title must start with a letter\")\n    ])\n    text = models.TextField(",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class Comment(models.Model):\n    author = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    post = models.ForeignKey(Post, on_delete=models.CASCADE)\n    text = models.TextField(\n        validators = [MinLengthValidator(2)]\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    reply_to = models.ForeignKey(\n        'self',",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "PostUserLikes",
        "kind": 6,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "class PostUserLikes(models.Model):\n    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    post = models.ForeignKey(Post, on_delete=models.CASCADE)\n    like_type = models.CharField(\n        choices=LIKE_CHOICES,\n        max_length=10,\n        default='like'\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    # prevent multiple likes/dislikes per post",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "STATUS_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "STATUS_CHOICES = [\n    ('draft', 'Draft'),\n    ('published', 'Published'),\n    ('archived', 'Archived')\n]\nclass Post(models.Model):\n    author = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    title = models.CharField(max_length=100, unique=True, validators=[\n        MinLengthValidator(5),\n        MaxLengthValidator(100),",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "LIKE_CHOICES",
        "kind": 5,
        "importPath": "blog.models",
        "description": "blog.models",
        "peekOfCode": "LIKE_CHOICES = [\n    ('like', 'Like'),\n    ('dislike', 'Dislike')\n]\nclass PostUserLikes(models.Model):\n    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE)\n    post = models.ForeignKey(Post, on_delete=models.CASCADE)\n    like_type = models.CharField(\n        choices=LIKE_CHOICES,\n        max_length=10,",
        "detail": "blog.models",
        "documentation": {}
    },
    {
        "label": "TagField",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class TagField(TagListSerializerField):\n    def to_internal_value(self, value):\n        request = self.context.get('request')\n        is_browsable_api = (\n            request\n            and hasattr(request, 'accepted_renderer')\n            and request.accepted_renderer.format == 'api'\n        )\n        if (\n            is_browsable_api",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class PostSerializer(TaggitSerializer, ModelSerializer):\n    tags = TagField(style={'base_template': 'textarea.html'})  \n    class Meta:\n        model = Post\n        fields = '__all__'\nclass CommentSerializer(ModelSerializer):\n    class Meta:\n        model = Comment\n        fields = '__all__'\nclass UserProfileSerializer(ModelSerializer):",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "CommentSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class CommentSerializer(ModelSerializer):\n    class Meta:\n        model = Comment\n        fields = '__all__'\nclass UserProfileSerializer(ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = '__all__'\nclass PostUserLikesSerializer(ModelSerializer):\n    class Meta:",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "UserProfileSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class UserProfileSerializer(ModelSerializer):\n    class Meta:\n        model = UserProfile\n        fields = '__all__'\nclass PostUserLikesSerializer(ModelSerializer):\n    class Meta:\n        model = PostUserLikes\n        fields = '__all__'",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "PostUserLikesSerializer",
        "kind": 6,
        "importPath": "blog.serializers",
        "description": "blog.serializers",
        "peekOfCode": "class PostUserLikesSerializer(ModelSerializer):\n    class Meta:\n        model = PostUserLikes\n        fields = '__all__'",
        "detail": "blog.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register('comments', CommentsViewSet, basename='comment')\nrouter.register('posts', PostsViewSet, basename='posts')\nrouter.register('user-profile', UserProfileViewSet, basename='user-profile')\nrouter.register('likes', LikesViewSet, basename='likes')\nfrom rest_framework.authtoken import views as auth_views\nurlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls')),\n    path('login/', auth_views.obtain_auth_token)",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "blog.urls",
        "description": "blog.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls')),\n    path('login/', auth_views.obtain_auth_token)\n]",
        "detail": "blog.urls",
        "documentation": {}
    },
    {
        "label": "CommentsViewSet",
        "kind": 6,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "class CommentsViewSet(ModelViewSet):\n    queryset = Comment.objects.all()\n    serializer_class = CommentSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\n    def create(self, request, *args, **kwargs):\n        data = request.data\n        reply_to = data.get('reply_to')\n        post_id = try_parse_int(data.get('post'))\n        if reply_to:\n            replied = Comment.objects.get(id=reply_to)",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "PostsViewSet",
        "kind": 6,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "class PostsViewSet(ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\nclass UserProfileViewSet(ModelViewSet):\n    queryset = UserProfile.objects.all()\n    serializer_class = UserProfileSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\nclass LikesViewSet(ModelViewSet):\n    queryset = PostUserLikes.objects.all()",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "UserProfileViewSet",
        "kind": 6,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "class UserProfileViewSet(ModelViewSet):\n    queryset = UserProfile.objects.all()\n    serializer_class = UserProfileSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\nclass LikesViewSet(ModelViewSet):\n    queryset = PostUserLikes.objects.all()\n    serializer_class = PostUserLikesSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\n# class DemoViewSet(ViewSet):\n#     \"\"\"",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "LikesViewSet",
        "kind": 6,
        "importPath": "blog.views",
        "description": "blog.views",
        "peekOfCode": "class LikesViewSet(ModelViewSet):\n    queryset = PostUserLikes.objects.all()\n    serializer_class = PostUserLikesSerializer\n    permission_classes = [IsOwnerOrModelPermissions]\n# class DemoViewSet(ViewSet):\n#     \"\"\"\n#     Example empty viewset demonstrating the standard actions\n#     \"\"\"\n#     def list(self, request):\n#        # posts = PostSerializer(Post.objects.all())",
        "detail": "blog.views",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrModelPermissions",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class IsOwnerOrModelPermissions(DjangoModelPermissions):\n    # we already have has_permission method in DjangoModelPermissions\n    # so we need to override has_object_permission\n    def has_object_permission(self, request, view, obj):\n        if (\n            request.method in permissions.SAFE_METHODS \n            and super().has_permission(request, view)\n        ):\n            return True\n        return (",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "IsOwnerOrReadOnly",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class IsOwnerOrReadOnly(BasePermission):\n    def has_object_permission(self, request, view, obj):\n        # GET is allowed\n        if request.method in permissions.SAFE_METHODS:\n            return True\n        # posts and comments has attribute author\n        if hasattr(obj, 'author'):\n            return obj.author.user == request.user\n        return False\nclass IsAdminOrModerator(BasePermission):",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminOrModerator",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class IsAdminOrModerator(BasePermission):\n    # by default has_object_permission returns True\n    def has_permission(self, request, view):\n        is_admin = (\n            request.user and\n            request.user.is_authenticated and\n            request.user.is_superuser\n        )\n        if is_admin:\n            return True",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "try_parse_int",
        "kind": 2,
        "importPath": "core.utils",
        "description": "core.utils",
        "peekOfCode": "def try_parse_int(value: str, default=None):\n    try:\n        return int(value)\n    except (ValueError, TypeError):\n        return default\n# x = try_parse_int(\"hello\", 0)\n# x = try_parse_int(\"hello\")",
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "hw.migrations.0001_initial",
        "description": "hw.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FunFact',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('text', models.TextField()),",
        "detail": "hw.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "HwConfig",
        "kind": 6,
        "importPath": "hw.apps",
        "description": "hw.apps",
        "peekOfCode": "class HwConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hw'",
        "detail": "hw.apps",
        "documentation": {}
    },
    {
        "label": "FunFact",
        "kind": 6,
        "importPath": "hw.models",
        "description": "hw.models",
        "peekOfCode": "class FunFact(models.Model):\n    text = models.TextField()\n    source = models.CharField(max_length=100)\n    source_url = models.URLField()\n    language = models.CharField(\n        max_length=2,\n        choices=[('he', 'Hebrew'), ('en', 'English')]\n    )\n    def __str__(self):\n        return self.text",
        "detail": "hw.models",
        "documentation": {}
    },
    {
        "label": "FunFactsSerializer",
        "kind": 6,
        "importPath": "hw.serializers",
        "description": "hw.serializers",
        "peekOfCode": "class FunFactsSerializer(ModelSerializer):\n    class Meta:\n        model = FunFact\n        # fields = ['id', 'fact', 'source']\n        fields = '__all__'\n        # exclude = ['password']",
        "detail": "hw.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "hw.urls",
        "description": "hw.urls",
        "peekOfCode": "urlpatterns = [\n    path('facts/', FunFactsView.as_view(), name='fun-facts'),\n    path('facts/<int:pk>/', FactsDetailsView.as_view(), name='fun-facts-details'),\n]",
        "detail": "hw.urls",
        "documentation": {}
    },
    {
        "label": "FunFactsView",
        "kind": 6,
        "importPath": "hw.views",
        "description": "hw.views",
        "peekOfCode": "class FunFactsView(APIView):\n    def get(self, request: Request):\n        facts = FunFact.objects.all()\n        serializer = FunFactsSerializer(facts, many=True)\n        return Response({'facts': serializer.data})\n    def post(self, request: Request):\n        serializer = FunFactsSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=201)",
        "detail": "hw.views",
        "documentation": {}
    },
    {
        "label": "FactsDetailsView",
        "kind": 6,
        "importPath": "hw.views",
        "description": "hw.views",
        "peekOfCode": "class FactsDetailsView(APIView):\n    def get(self, request: Request, pk: int):\n        try:\n            fact = FunFact.objects.get(pk=pk)\n        except FunFact.DoesNotExist:\n            return Response(\n                {'message': f'Fact with id {pk} not found'},\n                status=404\n            )\n        serializer = FunFactsSerializer(fact)",
        "detail": "hw.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "lec4.asgi",
        "description": "lec4.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "lec4.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-p#o1(@$v4gnd4p+lpui-4v!zywd7wy!wd!#-_mx0)e54e!5ntl'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-p#o1(@$v4gnd4p+lpui-4v!zywd7wy!wd!#-_mx0)e54e!5ntl'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'taggit',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'lec4.urls'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "ROOT_URLCONF = 'lec4.urls'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n            os.path.join(BASE_DIR, 'templatetags')\n        ],",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n            os.path.join(BASE_DIR, 'templatetags')\n        ],\n        'APP_DIRS': True,",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n            os.path.join(BASE_DIR, 'templatetags')\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n            os.path.join(BASE_DIR, 'templatetags')\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "WSGI_APPLICATION = 'lec4.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'drf_blog',\n        'USER': 'postgres',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'drf_blog',\n        'USER': 'postgres',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',\n        'PORT': '5432',\n    }\n}",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_RENDERER_CLASSES': [\n        'rest_framework.renderers.JSONRenderer',\n        'rest_framework.renderers.BrowsableAPIRenderer',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ], \n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "TAGGIT_CASE_INSENSITIVE",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "TAGGIT_CASE_INSENSITIVE = True\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "lec4.settings",
        "description": "lec4.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "lec4.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "lec4.urls",
        "description": "lec4.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/v1/', include('blog.urls')),\n]\n# https://docs.djangoproject.com/en/5.1/howto/static-files/#serving-static-files-during-development\nurlpatterns += static(\n        settings.MEDIA_URL,\n        document_root=settings.MEDIA_ROOT\n)",
        "detail": "lec4.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "lec4.wsgi",
        "description": "lec4.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "lec4.wsgi",
        "documentation": {}
    },
    {
        "label": "join_space",
        "kind": 2,
        "importPath": "templatetags.custom_filters",
        "description": "templatetags.custom_filters",
        "peekOfCode": "def join_space(value):\n    if isinstance(value, (list, tuple)):\n        return \" \".join(value)\n    return value\n# usage:\n# include templatetags in settings.py\n# {% load custom_filters %}\n# {% tags|join_space %}",
        "detail": "templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "templatetags.custom_filters",
        "description": "templatetags.custom_filters",
        "peekOfCode": "register = template.Library()\n@register.filter\ndef join_space(value):\n    if isinstance(value, (list, tuple)):\n        return \" \".join(value)\n    return value\n# usage:\n# include templatetags in settings.py\n# {% load custom_filters %}\n# {% tags|join_space %}",
        "detail": "templatetags.custom_filters",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'lec4.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]